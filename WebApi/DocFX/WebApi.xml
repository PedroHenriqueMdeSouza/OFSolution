<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WebApi</name>
    </assembly>
    <members>
        <member name="T:WebApi.Controllers.CarroController">
            <summary>
            This is the controller to perform the carro CRUD operations.
            </summary>
        </member>
        <member name="M:WebApi.Controllers.CarroController.#ctor(Microsoft.Extensions.Logging.ILogger{WebApi.Controllers.CarroController},WebApi.Repositories.IRepository{Core.Models.CarroModel})">
            <summary>
            This constructor initializes the logger and repository using the generic controller constructor.
            </summary>
            <param name="logger">The logger object.</param>
            <param name="repository">The repository object.</param>
        </member>
        <member name="T:WebApi.Controllers.CRUDControllerBase`4">
            <summary>
            This is the generic controller to perform CRUD operations.
            </summary>
        </member>
        <member name="P:WebApi.Controllers.CRUDControllerBase`4.Logger">
            <value>
            Gets the logger.
            </value>
        </member>
        <member name="P:WebApi.Controllers.CRUDControllerBase`4.Repository">
            <value>
            Gets the repository.
            </value>
        </member>
        <member name="M:WebApi.Controllers.CRUDControllerBase`4.#ctor(Microsoft.Extensions.Logging.ILogger{`1},WebApi.Repositories.IRepository{`0})">
            <summary>
            This constructor initializes the logger and repository.
            </summary>
            <param name="logger">The logger object.</param>
            <param name="repository">The repository object.</param>
        </member>
        <member name="M:WebApi.Controllers.CRUDControllerBase`4.Get">
            <summary>
            Gets all the records from the table mapped to type of <typeparamref name="T"/>.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that returns a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <typeparamref name="TView"/>.</returns>
        </member>
        <member name="M:WebApi.Controllers.CRUDControllerBase`4.Get(System.Int32)">
            <summary>
            Get a record in table mapped to type <typeparamref name="T"/> by its <c>id</c>.
            </summary>
            <param name="id">The <c>id</c> of the record to be fetched.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that returns an <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult`1"/> of <typeparamref name="TView"/> containing the data in the record with matched <c>id</c>.</returns>
        </member>
        <member name="M:WebApi.Controllers.CRUDControllerBase`4.Post(`2)">
            <summary>
            Inserts a record with the data in <paramref name="obj"/>.
            </summary>
            <param name="obj">The mapped object containing the data to be inserted.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that returns an <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult`1"/> of <typeparamref name="TView"/> with the data inserted.</returns>
        </member>
        <member name="M:WebApi.Controllers.CRUDControllerBase`4.Delete(System.Int32)">
            <summary>
            Deletes the record in table mapped to type <typeparamref name="T"/> that matches the <c>id</c> in <paramref name="id"/>.
            </summary>
            <param name="id">The <c>id</c> of the record to be deleted.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that returns a <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult"/>.</returns>
        </member>
        <member name="M:WebApi.Controllers.CRUDControllerBase`4.Put(System.Int32,`2)">
            <summary>
            Updates the record in table mapped to <typeparamref name="T"/> that matches the <c>id</c> in <paramref name="id"/> with the data in <paramref name="obj"/>.
            </summary>
            <param name="id">The <c>id</c> of the record to be updated.</param>
            <param name="obj">The dono object containing the data to update the record.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that returns a <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult"/>.</returns>
        </member>
        <member name="M:WebApi.Controllers.CRUDControllerBase`4.ToModel(`2)">
            <summary>
            Method to convert <typeparamref name="TFromBody"/> to <typeparamref name="T"/>.
            </summary>
            <param name="obj">The <typeparamref name="TFromBody"/> object to be converted.</param>
            <returns>The converted <typeparamref name="T"/> object.</returns>
        </member>
        <member name="M:WebApi.Controllers.CRUDControllerBase`4.ToView(`0)">
            <summary>
            Method to convert <typeparamref name="T"/> to <typeparamref name="TView"/>.
            </summary>
            <param name="obj">The <typeparamref name="T"/> object to be converted.</param>
            <returns>The converted <typeparamref name="TView"/> object.</returns>
        </member>
        <member name="T:WebApi.Controllers.DonoController">
            <summary>
            This is the controller to perform the dono CRUD operations.
            </summary>
        </member>
        <member name="M:WebApi.Controllers.DonoController.#ctor(Microsoft.Extensions.Logging.ILogger{WebApi.Controllers.DonoController},WebApi.Repositories.IRepository{Core.Models.DonoModel})">
            <summary>
            This constructor initializes the logger and repository using the generic controller constructor.
            </summary>
            <param name="logger">The logger object.</param>
            <param name="repository">The repository object.</param>
        </member>
        <member name="T:WebApi.Controllers.MaterialCompradoController">
            <summary>
            This is the controller to perform the material comprado CRUD operations.
            </summary>
        </member>
        <member name="M:WebApi.Controllers.MaterialCompradoController.#ctor(Microsoft.Extensions.Logging.ILogger{WebApi.Controllers.MaterialCompradoController},WebApi.Repositories.IRepository{Core.Models.MaterialCompradoModel})">
            <summary>
            This constructor initializes the logger and repository using the generic controller constructor.
            </summary>
            <param name="logger">The logger object.</param>
            <param name="repository">The repository object.</param>
        </member>
        <member name="T:WebApi.Controllers.ServicoController">
            <summary>
            This is the controller to perform the servico CRUD operations.
            </summary>
        </member>
        <member name="M:WebApi.Controllers.ServicoController.#ctor(Microsoft.Extensions.Logging.ILogger{WebApi.Controllers.ServicoController},WebApi.Repositories.IRepository{Core.Models.ServicoModel})">
            <summary>
            This constructor initializes the logger and repository using the generic controller constructor.
            </summary>
            <param name="logger">The logger object.</param>
            <param name="repository">The repository object.</param>
        </member>
        <member name="T:WebApi.Repositories.IRepository`1">
            <summary>
            Generic repository for the Entity Framework Core.
            </summary>
            <typeparam name="T">A model class that inherits from BaseModel.</typeparam>
        </member>
        <member name="M:WebApi.Repositories.IRepository`1.Get">
            <summary>
            This method gets all the records from the database.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that returns all the records from the database.</returns>
        </member>
        <member name="M:WebApi.Repositories.IRepository`1.Get(System.Int32)">
            <summary>
            This method gets the record that matches the ID in the parameter.
            </summary>
            <param name="id">The ID of the record that will be fetched.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that returns the record.</returns>
        </member>
        <member name="M:WebApi.Repositories.IRepository`1.Create(`0)">
            <summary>
            This method inserts a new record into the database.
            </summary>
            <param name="record">The record to be inserted.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that returns the inserted record.</returns>
        </member>
        <member name="M:WebApi.Repositories.IRepository`1.Update(`0)">
            <summary>
            This method updates the record that matches the update object ID passed in the parameter.
            </summary>
            <param name="update">The object containing the data to be updated.</param>
            <returns></returns>
        </member>
        <member name="M:WebApi.Repositories.IRepository`1.Delete(System.Int32)">
            <summary>
            This method deletes a record from the database.
            </summary>
            <param name="id">The ID of the record to be deleted.</param>
            <returns></returns>
        </member>
        <member name="T:WebApi.Repositories.Repository`1">
            <summary>
            Generic repository for the Entity Framework Core.
            </summary>
            <typeparam name="T">A model class that inherits from BaseModel.</typeparam>
        </member>
        <member name="P:WebApi.Repositories.Repository`1.Context">
            <value>Property <c>Context</c> gets the context object.</value>
        </member>
        <member name="M:WebApi.Repositories.Repository`1.#ctor(WebApi.EF.Context)">
            <summary>
            This constructor initializes the context object.
            </summary>
            <param name="context">The context object</param>
        </member>
        <member name="M:WebApi.Repositories.Repository`1.Create(`0)">
            <summary>
            This method inserts a new record into the database.
            </summary>
            <param name="record">The record to be inserted.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that returns the inserted record.</returns>
        </member>
        <member name="M:WebApi.Repositories.Repository`1.Delete(System.Int32)">
            <summary>
            This method deletes a record from the database.
            </summary>
            <param name="id">The ID of the record to be deleted.</param>
            <returns></returns>
        </member>
        <member name="M:WebApi.Repositories.Repository`1.Get">
            <summary>
            This method gets all the records from the database.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that returns all the records from the database.</returns>
        </member>
        <member name="M:WebApi.Repositories.Repository`1.Get(System.Int32)">
            <summary>
            This method gets the record that matches the ID in the parameter.
            </summary>
            <param name="id">The ID of the record that will be fetched.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that returns the record.</returns>
        </member>
        <member name="M:WebApi.Repositories.Repository`1.Update(`0)">
            <summary>
            This method updates the record that matches the update object ID passed in the parameter.
            </summary>
            <param name="update">The object containing the data to be updated.</param>
            <returns></returns>
        </member>
        <member name="T:WebApi.Views.CarroView">
            <summary>
            This is the view for carro.
            </summary>
        </member>
        <member name="P:WebApi.Views.CarroView.Id">
            <value>
            <c>id</c> attribute.
            </value>
        </member>
        <member name="P:WebApi.Views.CarroView.DonoId">
            <value>
            <c>donoId</c> attribute.
            </value>
        </member>
        <member name="P:WebApi.Views.CarroView.Nome">
            <value>
            <c>nome</c> attribute.
            </value>
        </member>
        <member name="P:WebApi.Views.CarroView.Cor">
            <value>
            <c>cor</c> attribute.
            </value>
        </member>
        <member name="T:WebApi.Views.DonoView">
            <summary>
            This is the view for dono.
            </summary>
        </member>
        <member name="P:WebApi.Views.DonoView.Id">
            <value>
            <c>id</c> attribute.
            </value>
        </member>
        <member name="P:WebApi.Views.DonoView.Nome">
            <value>
            <c>nome</c> attribute
            </value>
        </member>
        <member name="P:WebApi.Views.DonoView.NumeroCelular">
            <value>
            <c>numeroCelular</c> attribute.
            </value>
        </member>
        <member name="T:WebApi.Views.MaterialCompradoView">
            <summary>
            This is the view for material comprado.
            </summary>
        </member>
        <member name="P:WebApi.Views.MaterialCompradoView.Id">
            <value>
            <c>id</c> attribute.
            </value>
        </member>
        <member name="P:WebApi.Views.MaterialCompradoView.Nome">
            <value>
            <c>nome</c> attribute.
            </value>
        </member>
        <member name="P:WebApi.Views.MaterialCompradoView.Dia">
            <value>
            <c>dia</c> attribute.
            </value>
        </member>
        <member name="P:WebApi.Views.MaterialCompradoView.Preco">
            <value>
            <c>preco</c> attribute.
            </value>
        </member>
        <member name="T:WebApi.Views.ServicoView">
            <summary>
            This is the view for servico.
            </summary>
        </member>
        <member name="P:WebApi.Views.ServicoView.Id">
            <value>
            <c>id</c> attribute.
            </value>
        </member>
        <member name="P:WebApi.Views.ServicoView.DonoId">
            <value>
            <c>donoId</c> attribute.
            </value>
        </member>
        <member name="P:WebApi.Views.ServicoView.CarroId">
            <value>
            <c>carroId</c> attribute.
            </value>
        </member>
        <member name="P:WebApi.Views.ServicoView.DataEntrega">
            <value>
            <c>dataEntrega</c> attribute.
            </value>
        </member>
        <member name="P:WebApi.Views.ServicoView.Preco">
            <value>
            <c>preco</c> attribute.
            </value>
        </member>
        <member name="P:WebApi.Views.ServicoView.Observacao">
            <value>
            <c>observacao</c> attribute.
            </value>
        </member>
    </members>
</doc>
